version: '3'
services:
  proxy:
    hostname: proxy
    image: jwilder/nginx-proxy
    container_name: proxydaw
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx-proxy:/etc/nginx/vhost.d:ro
      - "./conf/my_custom_proxy_settings.conf:/etc/nginx/conf.d/my_custom_proxy_settings.conf:ro"
    networks:
      - frontend
  web1: #Sitio de ejemplo
    image: php:7.3-apache # basta un apache con php
    container_name: web1
    hostname: web1
    volumes:
      - ./sitios/web1:/var/www/html
    environment:
      - VIRTUAL_HOST=web1.com,www.web1.com
    restart: always
    networks:
      - frontend
      - backend
  dwes: #sitio con material del profesor
    build: ./dockerfiles/dwes
    container_name: dwes
    hostname: dwes
    volumes:
      - ./sitios/dwes:/var/www/html
    environment:
      - VIRTUAL_HOST=dwes.local
    restart: always
    networks:
      - frontend
      - backend
  midwes: #sitio con material del profesor
    build: ./dockerfiles/dwes
    container_name: midwes
    hostname: midwes
    volumes:
      - ./sitios/midwes:/var/www/html
    environment:
      - VIRTUAL_HOST=midwes.local
    restart: always
    networks:
      - frontend
      - backend
  mvc: #sitio con material del profesor
    build: ./dockerfiles/dwes
    container_name: mvc
    hostname: mvc
    volumes:
      - /home/alumno/dwes/dwes/UD5/clase01:/var/www/html
    environment:
      - VIRTUAL_HOST=mvc.local
    restart: always
    networks:
      - frontend
      - backend
  mimvc: #sitio con material del profesor
    build: ./dockerfiles/dwes
    container_name: mimvc
    hostname: mimvc
    volumes:
      - /home/alumno/ReposDAW:/var/www/html
    environment:
      - VIRTUAL_HOST=mimvc.local
    restart: always
    networks:
      - frontend
      - backend
  pelu: #sitio para el proyecto de peluquería.
    build: ./dockerfiles/dwes
    container_name: pelu
    hostname: pelu
    volumes:
      #si no existe sitios/pelu se creará vacío (prop. root)
      #dará error "forbidden"
      - /home/alumno/Peluqueria/Peluqueria:/var/www/html
      - /home/alumno/Peluqueria/Peluqueria/php.ini:/usr/local/etc/php/php.ini
    environment:
      - VIRTUAL_HOST=pelu.local
    restart: always
    networks:
      - frontend
      - backend
  
  ex: #sitio para el proyecto de peluquería.
    build: ./dockerfiles/dwes
    container_name: ex
    hostname: ex
    volumes:
      #si no existe sitios/pelu se creará vacío (prop. root)
      #dará error "forbidden"
      - /home/alumno/ex:/var/www/html
    environment:
      - VIRTUAL_HOST=ex.local
    restart: always
  laravel:
    build:
      context: './dockerfiles/laravel'
      args:
        uid: 1000
    container_name: laravel
    depends_on:
      - db
    environment:
      - APACHE_RUN_USER=#1000
      - APACHE_RUN_GROUP=#1000
      - VIRTUAL_HOST=laravel.local
    volumes:
      - /home/alumno/dwes/dwes/UD5/clase07:/var/www/html
    networks:
      - frontend
      - backend

  doslaravel:
    build:
      context: './dockerfiles/laravel'
      args:
        uid: 1000
    container_name: doslaravel
    depends_on:
      - db
    environment:
      - APACHE_RUN_USER=#1000
      - APACHE_RUN_GROUP=#1000
      - VIRTUAL_HOST=doslaravel.local
    volumes:
      - /home/alumno/testClonadoGit:/var/www/html
    networks:
      - frontend
      - backend


  milaravel:
    build:
      context: './dockerfiles/laravel'
      args:
        uid: 1000
    container_name: milaravel
    depends_on:
      - db
    environment:
      - APACHE_RUN_USER=#1000
      - APACHE_RUN_GROUP=#1000
      - VIRTUAL_HOST=milaravel.local
    volumes:
      - /home/alumno/pelu_lopez:/var/www/html
    networks:
      - frontend
      - backend

  gymserver:
    build:
      context: './dockerfiles/laravel'
      args:
        uid: 1000
    container_name: gymserver
    depends_on:
      - db
    environment:
      - APACHE_RUN_USER=#1000
      - APACHE_RUN_GROUP=#1000
      - VIRTUAL_HOST=gymserver.local
    volumes:
      - /home/alumno/GymServer/GymServer:/var/www/html
    networks:
      - frontend
      - backend


  db:
    hostname: db
    image: mysql:5.7
    container_name: dbdaw
    ports:
      - "3306:3306"
    volumes:
      - ./data/db:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=demo
      - MYSQL_USER=dbuser
      - MYSQL_PASSWORD=secret
    networks:
      - backend
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    links:
      - db:db
    environment:
      - MYSQL_USERNAME=root
      - MYSQL_ROOT_PASSWORD=password
      - PMA_HOST=db
      - VIRTUAL_HOST=phpmyadmin.docker
    networks:
      - frontend
      - backend
networks:
  frontend:
  backend:
    